package main

import "fmt"
import "time"
import "math/big"

func getN(n int)int{
    result:=0
    lmap:=make(map[string]int)
    z:=big.NewInt(0)
    for a:=2;a<=n;a++{
        for b:=2;b<=n;b++{
            z.Exp(big.NewInt(int64(a)),big.NewInt(int64(b)),nil)
            lmap[z.String()]++
        }
    }
    for range(lmap){
        result++
    }
    return result
}

func main(){
    fmt.Println(`
    Distinct powers
    Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125
    If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    不重复的幂
    对于所有的2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    a^b有15个不重复的结果（2^4=4^2有一个重复）。
    请问：2 ≤ a ≤ 100 and 2 ≤ b ≤ 100
    不算重复的话有多少个结果？
    `)
    starttime:=time.Now()
    fmt.Println(getN(100))
    fmt.Println("Time elapsed: ", time.Since(starttime))
}